<Window x:Class="SciChart.CTCTutorial.MVVMWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SciChart.CTCTutorial"
        xmlns:s="http://schemas.abtsoftware.co.uk/scichart"
        mc:Ignorable="d"
        Title="MVVMWindow" Height="450" Width="800">

    <Window.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/SciChart.Charting;component/Themes/Default.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <local:MainViewModel x:Key="MainViewModel"/>
            <!-- The TooltipControl template is defined below -->
            <!-- Change this if you want to have a non-default tooltip container -->
            <!-- The ContentPresenter is bound to the DataContext (a SeriesInfo type) -->
            <!-- and the ContentTemplate is the DataTemplate for the SeriesInfo -->
            <!-- Finally, the TooltipContainerStyle is set on the RenderableSeries via Style -->
            <Style x:Key="TooltipContainer" TargetType="s:TooltipControl">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="s:TooltipControl">
                            <Border Background="#ff6495ed"
                            BorderBrush="#ff87B1FA"
                            BorderThickness="2"
                            CornerRadius="5"
                            Opacity="0.9"
                            Padding="5">
                                <ContentPresenter Content="{TemplateBinding DataContext}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Tooltip Template for an XyDataSeries binds to XySeriesInfo -->
            <!-- Check out the properties on XySeriesInfo to see what you can bind to -->
            <DataTemplate x:Key="TooltipTemplate" DataType="s:XySeriesInfo">
                <StackPanel Orientation="Vertical">
                    <TextBlock Foreground="White">
                <Run Text="Series: "/>
                <Run Text="{Binding SeriesName, StringFormat='{}{0}:'}"/>
                    </TextBlock>
                    <TextBlock Foreground="White">
                <Run Text="X-Value: "/>
                <Run Text="{Binding FormattedXValue, Mode=OneWay}"/>
                    </TextBlock>
                    <TextBlock Foreground="White">
                <Run Text="Y-Value: "/>
                <Run Text="{Binding FormattedYValue, Mode=OneWay}"/>
                    </TextBlock>
                </StackPanel>
            </DataTemplate>
            <!-- Style applied via x:Key name in ViewModel. See StyleKey property of LineRenderableSeriesViewModel -->
            <Style TargetType="s:BaseRenderableSeries"  x:Key="LineSeriesStyle">
                <Setter Property="s:RolloverModifier.TooltipContainerStyle" Value="{StaticResource TooltipContainer}"/>
                <Setter Property="s:RolloverModifier.TooltipTemplate" Value="{StaticResource TooltipTemplate}"/>
                <Setter Property="s:RolloverModifier.IncludeSeries" Value="True"/>
                <Setter Property="StrokeThickness" Value="2"/>
            </Style>

            <!-- Style applied to InfoAnnotation ensures default properties are bound -->
            <Style TargetType="local:InfoAnnotation" BasedOn="{StaticResource MvvmCustomAnnotationStyle}"/>
        </ResourceDictionary>
        
    </Window.Resources>

    <Grid DataContext="{StaticResource MainViewModel}">

        <!-- New code here. Add RowDefinitions -->
        <Grid.RowDefinitions>
            <RowDefinition Height="32"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- New code here: Add controls to toggle between zoom and pan -->
        <StackPanel Orientation="Horizontal" Background="#333">
            <CheckBox Margin="5" Foreground="#FFF" Content="Enable Zoom?" IsChecked="{Binding EnableZoom, Mode=TwoWay}"/>
            <CheckBox Margin="5" Foreground="#FFF" Content="Enable Pan?" IsChecked="{Binding EnablePan, Mode=TwoWay}" />
        </StackPanel>

        <!-- Don't forget to add Grid.Row=1 -->
        <!-- Add a new line for XAxes and YAxes binding to collections in the ViewModel -->
        <s:SciChartSurface Grid.Row="1"
                    RenderableSeries="{s:SeriesBinding RenderableSeries}" 
                    Annotations="{s:AnnotationsBinding Annotations}"
                    YAxes="{s:AxesBinding YAxes}"
                    XAxes="{s:AxesBinding XAxes}"
                    ChartTitle="{Binding ChartTitle}">

            <!-- Don't forget to remove the XAxis and YAxis we defined in XAML! -->

            <!-- Inside your SciChartSurface.ChartModifier group -->
            <s:SciChartSurface.ChartModifier>
                <!-- Ensure ModifierGroup DataContext is the MainViewModel (not the ChartViewModel)-->
                <s:ModifierGroup>
                    <s:RubberBandXyZoomModifier IsEnabled="{Binding EnableZoom}" />
                    <s:ZoomPanModifier IsEnabled="{Binding EnablePan}" ClipModeX="None" />
                    <s:ZoomExtentsModifier/>

                    <!-- NEW CODE HERE: Add the LegendModifier and RolloverModifier -->
                    <s:LegendModifier ShowLegend="True" Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center"/>
                    <s:RolloverModifier ShowTooltipOn="MouseHover"/>
                    <!-- END NEW CODE -->
                </s:ModifierGroup>
            </s:SciChartSurface.ChartModifier>

        </s:SciChartSurface>
    </Grid>
    
</Window>
